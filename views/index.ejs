<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="description" content="ERMFox's Portfolio - Explore game design, worldbuilding, coding, and art. Discover immersive worlds, stories, and interactive projects.">
        <meta name="keywords" content="ERMFox, game design, worldbuilding, coding, art, portfolio">
        <meta name="author" content="ERMFox">
        <meta name="robots" content="index, follow"> <!-- Allow search engines to index and follow links -->
        <title>ERMFox Portfolio</title>
        <link href="/css/output.css" rel="stylesheet">
    </head>
<body class="flex flex-col min-h-screen bg-gray-100 dark:bg-slate-800 text-gray-800 dark:text-gray-200 font-sans">
    <!-- Navbar -->
    <%- include('partials/navbar') %>

    <!-- Main Content -->
    <main class="flex-grow p-8 max-w-5xl mx-auto">
        <!-- Welcome Section -->
        <section class="text-center mb-12">
            <h1 class="text-3xl font-bold mb-4">Welcome to ERMFox's Portfolio</h1>
            <p class="text-lg">Discover my journey in game design, art, and coding projects.</p>
            <q>The community makes the game</q>
        </section>

        <!-- Introduction Section -->
        <section class="mb-12">
            <h2 class="text-2xl font-semibold mb-4">About Me</h2>
            <p>
                Hi, I'm ERMFox! I'm passionate about creating immersive worlds, engaging stories, and interactive experiences.
                My journey includes a blend of game design, worldbuilding, coding, and art, all aimed at building memorable
                experiences for players and users alike. I’m currently working toward a game design degree, while also freelancing
                as a backend developer.
            </p>
        </section>

        <!-- Portfolio Highlights Section -->
        <section class="mb-12">
            <h2 class="text-2xl font-semibold mb-4">Portfolio Highlights</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Art Section -->
                <div class="bg-white dark:bg-slate-900 p-6 rounded-lg shadow-md">
                    <h3 class="text-xl font-bold mb-2">Art</h3>
                    <p>Explore my artwork, including illustrations and concept designs.</p>
                    <a href="/portfolio#art" class="text-rose-600 dark:text-purple-600 font-semibold hover:underline">View Art &rarr;</a>
                </div>

                <!-- Worldbuilding Section -->
                <div class="bg-white dark:bg-slate-900 p-6 rounded-lg shadow-md">
                    <h3 class="text-xl font-bold mb-2">Worldbuilding</h3>
                    <p>Dive into the worlds I’ve created, complete with rich lore and storytelling.</p>
                    <a href="/portfolio#worlds" class="text-rose-600 dark:text-purple-600 font-semibold hover:underline">Explore Worlds &rarr;</a>
                </div>

        <script>
           const GITHUB_API_URL = "https://api.github.com/graphql";

// Fetch the GitHub token from the server
async function getGithubToken() {
    const response = await fetch('/github-token');
    if (!response.ok) {
        throw new Error('Failed to fetch GitHub token');
    }
    const { token } = await response.json();
    return token;
}

// Fetch pinned repositories
async function fetchPinnedRepos() {
    const TOKEN = await getGithubToken();

    const query = `
        query {
            user(login: "ERMFox") {
                pinnedItems(first: 6, types: REPOSITORY) {
                    nodes {
                        ... on Repository {
                            name
                            description
                            url
                            primaryLanguage {
                                name
                                color
                            }
                            stargazerCount
                            forkCount
                            languages(first: 10) {
                                edges {
                                    size
                                    node {
                                        name
                                        color
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    `;

    const response = await fetch(GITHUB_API_URL, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${TOKEN}`,
        },
        body: JSON.stringify({ query }),
    });

    if (!response.ok) {
        console.error("Failed to fetch pinned repositories");
        return [];
    }

    const result = await response.json();
    return result.data.user.pinnedItems.nodes;
}

            // Create language bars
            function createLanguageBars(languages) {
                const totalSize = languages.reduce((sum, lang) => sum + lang.size, 0);
                const container = document.createElement("div");
                container.className = "relative h-4 mt-4 flex rounded-md overflow-hidden";

                languages.forEach(({ node, size }) => {
                    const percentage = ((size / totalSize) * 100).toFixed(2);

                    const bar = document.createElement("div");
                    bar.style.width = `${percentage}%`;
                    bar.style.backgroundColor = node.color || "#ccc";
                    bar.className = "h-full";
                    bar.title = `${node.name}: ${percentage}%`;

                    container.appendChild(bar);
                });

                return container;
            }

            // Create language balls
            function createLanguageBalls(languages) {
                const container = document.createElement("div");
                container.className = "flex flex-wrap items-center gap-2 mt-2";

                languages.forEach(({ node, size }) => {
                    const dot = document.createElement("span");
                    dot.className = "inline-block w-3 h-3 rounded-full";
                    dot.style.backgroundColor = node.color || "#ccc";

                    const label = document.createElement("span");
                    label.className = "text-sm ml-1";
                    label.textContent = `${node.name} (${((size / languages.reduce((sum, lang) => sum + lang.size, 0)) * 100).toFixed(2)}%)`;

                    const languageContainer = document.createElement("div");
                    languageContainer.className = "flex items-center gap-1";

                    languageContainer.appendChild(dot);
                    languageContainer.appendChild(label);
                    container.appendChild(languageContainer);
                });

                return container;
            }

            // Render pinned repositories
            async function renderPinnedRepos() {
                const pinnedReposContainer = document.getElementById("pinned-repos");
                const repos = await fetchPinnedRepos();

                repos.forEach((repo) => {
                    const card = document.createElement("div");
                    card.className = "bg-white dark:bg-slate-900 p-6 rounded-lg shadow-md";

                    const title = document.createElement("h3");
                    title.className = "text-xl font-bold mb-2";
                    title.textContent = repo.name;

                    const description = document.createElement("p");
                    description.className = "text-gray-600 dark:text-gray-400 mb-4";
                    description.textContent = repo.description || "No description available.";

                    const link = document.createElement("a");
                    link.className = "text-rose-600 dark:text-purple-600 font-semibold hover:underline";
                    link.href = repo.url;
                    link.target = "_blank";
                    link.textContent = "View Repository →";

                    // Add language balls
                    const languageBalls = repo.languages.edges.length > 0 
                        ? createLanguageBalls(repo.languages.edges) 
                        : null;

                    // Add language bar
                    const languageBar = repo.languages.edges.length > 0 
                        ? createLanguageBars(repo.languages.edges) 
                        : null;

                    // Combine elements
                    card.appendChild(title);
                    card.appendChild(description);
                    if (languageBalls) {
                        card.appendChild(languageBalls);
                    }
                    if (languageBar) {
                        card.appendChild(languageBar);
                    }
                    card.appendChild(link);

                    pinnedReposContainer.appendChild(card);
                });
            }

            // Fetch and render pinned repositories on page load
            renderPinnedRepos();
        </script>
    </body>
</html>
